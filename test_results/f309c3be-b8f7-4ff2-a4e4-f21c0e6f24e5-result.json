{"name": "test_buy_product", "status": "broken", "statusDetails": {"message": "ValueError: could not convert string to float: '1,090'", "trace": "self = <pages.checkout_page.CheckoutPage object at 0x0000015CB84B6810>, subtotal_in_the_cart = '$1,090'\n\n    def checkout(self, subtotal_in_the_cart):\n        \"\"\"Making an order, which includes checking for an expired session error, entering user fake data before\n        filling out billing information.\"\"\"\n    \n        with allure.step(\"checkout\"):\n            Logger.add_start_step(\"checkout\")\n            self.assert_url(\"https://bloomscape.com/checkout/\")\n    \n            try:\n>               self.get_error_message()\n\npages\\checkout_page.py:153: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages\\checkout_page.py:47: in get_error_message\n    return WebDriverWait(self.driver, 30).until(ec.element_to_be_clickable((By.XPATH, self.error_message)))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"da534bad7becd98aac2204055774230b\")>, method = <function element_to_be_clickable.<locals>._predicate at 0x0000015CB857E020>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nset_up = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"da534bad7becd98aac2204055774230b\")>, set_group = None\n\n    @allure.description(\"Test buy product\")\n    def test_buy_product(set_up, set_group):\n        \"\"\"A test that includes user authorization, selecting a specific set of filters, selecting an item that meets the\n        filters, adding it to the cart and filling in user information.\"\"\"\n    \n        print(\"Test #1\")\n    \n        driver = set_up\n    \n        lp = LoginPage(driver)\n        mp = MainPage(driver)\n        sapp = ShopAllPlantsPage(driver)\n        pcp = ProductCardPage(driver)\n        yc = YourCart(driver)\n        cp = CheckoutPage(driver)\n    \n        lp.authorization_from_main_page()\n        mp.choose_section_shop_all_plants()\n        sapp.select_filters_set_1()\n        expected_product_name, expected_product_price = sapp.select_bromeliad_pineapple_plant()\n        pcp.add_product_to_the_shopping_cart(expected_product_name, expected_product_price)\n        subtotal_in_the_cart = yc.save_subtotal()\n        yc.to_checkout_page(expected_product_name, expected_product_price)\n>       cp.checkout(subtotal_in_the_cart)\n\ntests\\test_buy_product.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.checkout_page.CheckoutPage object at 0x0000015CB84B6810>, subtotal_in_the_cart = '$1,090'\n\n    def checkout(self, subtotal_in_the_cart):\n        \"\"\"Making an order, which includes checking for an expired session error, entering user fake data before\n        filling out billing information.\"\"\"\n    \n        with allure.step(\"checkout\"):\n            Logger.add_start_step(\"checkout\")\n            self.assert_url(\"https://bloomscape.com/checkout/\")\n    \n            try:\n                self.get_error_message()\n                print(\"Try to use the VPN connected to the US servers. Otherwise it will be impossible to work with \"\n                      \"the Checkout page.\")\n                print(\"You'll be redirected to the 'Shop All' page\")\n                self.get_screenshot()\n                Logger.add_end_step(self.driver.current_url, \"checkout\")\n    \n            except TimeoutException:\n    \n                subtotal_in_the_checkout = self.get_subtotal().text\n                self.assert_price(subtotal_in_the_checkout, subtotal_in_the_cart)\n                fake_first_name, fake_last_name, fake_address, fake_city, fake_zip, fake_phone = self.faker()\n                self.click_continue_button_1()\n                self.fill_in_first_name_field(fake_first_name)\n                self.fill_in_last_name_field(fake_last_name)\n                self.fill_in_street_address_field(fake_address)\n                self.fill_in_city_field(fake_city)\n                self.select_state(\"NY\")\n                self.fill_in_zip_field(fake_zip)\n                self.fill_in_phone_field(fake_phone)\n                self.click_continue_button_2()\n                self.select_express_shipping_option()\n                time.sleep(5)\n                self.click_continue_button_3()\n    \n                shipping_in_the_checkout = self.get_shipping().text\n                state_sales_tax_in_the_checkout = self.get_state_sales_tax().text\n                total_in_the_checkout = self.get_total().text\n>               subtotal_in_the_checkout_num = float(subtotal_in_the_checkout.replace(\"$\", \"\"))\nE               ValueError: could not convert string to float: '1,090'\n\npages\\checkout_page.py:181: ValueError"}, "description": "Test buy product", "steps": [{"name": "authorization_from_main_page", "status": "passed", "start": 1723723381530, "stop": 1723723466647}, {"name": "choose_section_shop_all_plants", "status": "passed", "start": 1723723466647, "stop": 1723723504006}, {"name": "select_filters_set_1", "status": "passed", "start": 1723723504007, "stop": 1723723549390}, {"name": "select_bromeliad_pineapple_plant", "status": "passed", "start": 1723723549390, "stop": 1723723589929}, {"name": "add_product_to_the_shopping_cart", "status": "passed", "start": 1723723589930, "stop": 1723723590154}, {"name": "save_subtotal", "status": "passed", "start": 1723723590154, "stop": 1723723593371}, {"name": "to_checkout_page", "status": "passed", "start": 1723723593371, "stop": 1723723630382}, {"name": "checkout", "status": "broken", "statusDetails": {"message": "ValueError: could not convert string to float: '1,090'\n", "trace": "  File \"C:\\Users\\saintosev\\PycharmProjects\\BloomscapeAutomationProject\\pages\\checkout_page.py\", line 181, in checkout\n    subtotal_in_the_checkout_num = float(subtotal_in_the_checkout.replace(\"$\", \"\"))\n                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n"}, "start": 1723723630383, "stop": 1723723677067}], "attachments": [{"name": "stdout", "source": "66873984-40c3-4703-ad14-01f42683f33b-attachment.txt", "type": "text/plain"}], "start": 1723723381530, "stop": 1723723677074, "uuid": "26b82ac1-fa4a-435a-9a1c-9492c76599dd", "historyId": "22557127bd8e5c9d27d61f44787213b8", "testCaseId": "22557127bd8e5c9d27d61f44787213b8", "fullName": "tests.test_buy_product#test_buy_product", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_buy_product"}, {"name": "host", "value": "DESKTOP-HJ761PI"}, {"name": "thread", "value": "8004-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_buy_product"}]}