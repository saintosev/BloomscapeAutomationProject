{"name": "test_buy_product", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"summary-text\">...</div> is not clickable at point (301, 14). Other element would receive the click: <ul id=\"mega-menu-primary\" class=\"mega-menu max-mega-menu mega-menu-horizontal\" data-event=\"click\" data-effect=\"disabled\" data-effect-speed=\"200\" data-effect-mobile=\"slide_right\" data-effect-speed-mobile=\"200\" data-mobile-force-width=\"false\" data-second-click=\"go\" data-document-click=\"collapse\" data-vertical-behaviour=\"accordion\" data-breakpoint=\"990\" data-unbind=\"true\" data-mobile-state=\"collapse_all\" data-hover-intent-timeout=\"300\" data-hover-intent-interval=\"100\" data-sticky-enabled=\"true\" data-sticky-desktop=\"true\" data-sticky-mobile=\"true\" data-sticky-offset=\"0\" data-sticky-expand=\"false\" data-sticky-expand-mobile=\"false\" data-sticky-transition=\"false\" style=\"\">...</ul>\n  (Session info: chrome=127.0.6533.120)\nStacktrace:\n\tGetHandleVerifier [0x00007FF792AF9642+30946]\n\t(No symbol) [0x00007FF792AAE3D9]\n\t(No symbol) [0x00007FF7929A6FDA]\n\t(No symbol) [0x00007FF7929FFEEE]\n\t(No symbol) [0x00007FF7929FD962]\n\t(No symbol) [0x00007FF7929FAE7B]\n\t(No symbol) [0x00007FF7929FA095]\n\t(No symbol) [0x00007FF7929EC271]\n\t(No symbol) [0x00007FF792A1CA6A]\n\t(No symbol) [0x00007FF7929EBBB6]\n\t(No symbol) [0x00007FF792A1CC80]\n\t(No symbol) [0x00007FF792A3B041]\n\t(No symbol) [0x00007FF792A1C813]\n\t(No symbol) [0x00007FF7929EA6E5]\n\t(No symbol) [0x00007FF7929EB021]\n\tGetHandleVerifier [0x00007FF792C2F84D+1301229]\n\tGetHandleVerifier [0x00007FF792C3BDC7+1351783]\n\tGetHandleVerifier [0x00007FF792C32A13+1313971]\n\tGetHandleVerifier [0x00007FF792B2DD16+245686]\n\t(No symbol) [0x00007FF792AB759F]\n\t(No symbol) [0x00007FF792AB3814]\n\t(No symbol) [0x00007FF792AB39A2]\n\t(No symbol) [0x00007FF792AAA3FF]\n\tBaseThreadInitThunk [0x00007FFF8DAD257D+29]\n\tRtlUserThreadStart [0x00007FFF8F12AF28+40]", "trace": "set_up = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"b5e3f2953e9105ad24d66daae8fff399\")>, set_group = None\n\n    @allure.description(\"Test buy product\")\n    def test_buy_product(set_up, set_group):\n        \"\"\"A test that includes user authorization, selecting a specific set of filters, selecting an item that meets the\n        filters, adding it to the cart and filling in user information.\"\"\"\n    \n        print(\"Test #1\")\n    \n        driver = set_up\n    \n        lp = LoginPage(driver)\n        mp = MainPage(driver)\n        sapp = ShopAllPlantsPage(driver)\n        pcp = ProductCardPage(driver)\n        yc = YourCart(driver)\n        cp = CheckoutPage(driver)\n    \n        lp.authorization_from_main_page()\n        mp.choose_section_shop_all_plants()\n>       sapp.select_filters_set_1()\n\ntests\\test_buy_product.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages\\shop_all_plants_page.py:56: in select_filters_set_1\n    self.shop_page.click_outdoor_light_filter()\npages\\shop_page.py:147: in click_outdoor_light_filter\n    self.get_outdoor_light_filter().click()\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000025B7AC31370>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF792AAA3FF]\\\\n\\\\tBaseThreadInitThunk [0x00007FFF8DAD257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFF8F12AF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"summary-text\">...</div> is not clickable at point (301, 14). Other element would receive the click: <ul id=\"mega-menu-primary\" class=\"mega-menu max-mega-menu mega-menu-horizontal\" data-event=\"click\" data-effect=\"disabled\" data-effect-speed=\"200\" data-effect-mobile=\"slide_right\" data-effect-speed-mobile=\"200\" data-mobile-force-width=\"false\" data-second-click=\"go\" data-document-click=\"collapse\" data-vertical-behaviour=\"accordion\" data-breakpoint=\"990\" data-unbind=\"true\" data-mobile-state=\"collapse_all\" data-hover-intent-timeout=\"300\" data-hover-intent-interval=\"100\" data-sticky-enabled=\"true\" data-sticky-desktop=\"true\" data-sticky-mobile=\"true\" data-sticky-offset=\"0\" data-sticky-expand=\"false\" data-sticky-expand-mobile=\"false\" data-sticky-transition=\"false\" style=\"\">...</ul>\nE         (Session info: chrome=127.0.6533.120)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF792AF9642+30946]\nE       \t(No symbol) [0x00007FF792AAE3D9]\nE       \t(No symbol) [0x00007FF7929A6FDA]\nE       \t(No symbol) [0x00007FF7929FFEEE]\nE       \t(No symbol) [0x00007FF7929FD962]\nE       \t(No symbol) [0x00007FF7929FAE7B]\nE       \t(No symbol) [0x00007FF7929FA095]\nE       \t(No symbol) [0x00007FF7929EC271]\nE       \t(No symbol) [0x00007FF792A1CA6A]\nE       \t(No symbol) [0x00007FF7929EBBB6]\nE       \t(No symbol) [0x00007FF792A1CC80]\nE       \t(No symbol) [0x00007FF792A3B041]\nE       \t(No symbol) [0x00007FF792A1C813]\nE       \t(No symbol) [0x00007FF7929EA6E5]\nE       \t(No symbol) [0x00007FF7929EB021]\nE       \tGetHandleVerifier [0x00007FF792C2F84D+1301229]\nE       \tGetHandleVerifier [0x00007FF792C3BDC7+1351783]\nE       \tGetHandleVerifier [0x00007FF792C32A13+1313971]\nE       \tGetHandleVerifier [0x00007FF792B2DD16+245686]\nE       \t(No symbol) [0x00007FF792AB759F]\nE       \t(No symbol) [0x00007FF792AB3814]\nE       \t(No symbol) [0x00007FF792AB39A2]\nE       \t(No symbol) [0x00007FF792AAA3FF]\nE       \tBaseThreadInitThunk [0x00007FFF8DAD257D+29]\nE       \tRtlUserThreadStart [0x00007FFF8F12AF28+40]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "description": "Test buy product", "steps": [{"name": "authorization_from_main_page", "status": "passed", "start": 1723805908835, "stop": 1723805993947}, {"name": "choose_section_shop_all_plants", "status": "passed", "start": 1723805993947, "stop": 1723806057691}, {"name": "select_filters_set_1", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"summary-text\">...</div> is not clickable at point (301, 14). Other element would receive the click: <ul id=\"mega-menu-primary\" class=\"mega-menu max-mega-menu mega-menu-horizontal\" data-event=\"click\" data-effect=\"disabled\" data-effect-speed=\"200\" data-effect-mobile=\"slide_right\" data-effect-speed-mobile=\"200\" data-mobile-force-width=\"false\" data-second-click=\"go\" data-document-click=\"collapse\" data-vertical-behaviour=\"accordion\" data-breakpoint=\"990\" data-unbind=\"true\" data-mobile-state=\"collapse_all\" data-hover-intent-timeout=\"300\" data-hover-intent-interval=\"100\" data-sticky-enabled=\"true\" data-sticky-desktop=\"true\" data-sticky-mobile=\"true\" data-sticky-offset=\"0\" data-sticky-expand=\"false\" data-sticky-expand-mobile=\"false\" data-sticky-transition=\"false\" style=\"\">...</ul>\n  (Session info: chrome=127.0.6533.120)\nStacktrace:\n\tGetHandleVerifier [0x00007FF792AF9642+30946]\n\t(No symbol) [0x00007FF792AAE3D9]\n\t(No symbol) [0x00007FF7929A6FDA]\n\t(No symbol) [0x00007FF7929FFEEE]\n\t(No symbol) [0x00007FF7929FD962]\n\t(No symbol) [0x00007FF7929FAE7B]\n\t(No symbol) [0x00007FF7929FA095]\n\t(No symbol) [0x00007FF7929EC271]\n\t(No symbol) [0x00007FF792A1CA6A]\n\t(No symbol) [0x00007FF7929EBBB6]\n\t(No symbol) [0x00007FF792A1CC80]\n\t(No symbol) [0x00007FF792A3B041]\n\t(No symbol) [0x00007FF792A1C813]\n\t(No symbol) [0x00007FF7929EA6E5]\n\t(No symbol) [0x00007FF7929EB021]\n\tGetHandleVerifier [0x00007FF792C2F84D+1301229]\n\tGetHandleVerifier [0x00007FF792C3BDC7+1351783]\n\tGetHandleVerifier [0x00007FF792C32A13+1313971]\n\tGetHandleVerifier [0x00007FF792B2DD16+245686]\n\t(No symbol) [0x00007FF792AB759F]\n\t(No symbol) [0x00007FF792AB3814]\n\t(No symbol) [0x00007FF792AB39A2]\n\t(No symbol) [0x00007FF792AAA3FF]\n\tBaseThreadInitThunk [0x00007FFF8DAD257D+29]\n\tRtlUserThreadStart [0x00007FFF8F12AF28+40]\n\n", "trace": "  File \"C:\\Users\\saintosev\\PycharmProjects\\BloomscapeAutomationProject\\pages\\shop_all_plants_page.py\", line 56, in select_filters_set_1\n    self.shop_page.click_outdoor_light_filter()\n  File \"C:\\Users\\saintosev\\PycharmProjects\\BloomscapeAutomationProject\\pages\\shop_page.py\", line 147, in click_outdoor_light_filter\n    self.get_outdoor_light_filter().click()\n  File \"C:\\Users\\saintosev\\PycharmProjects\\BloomscapeAutomationProject\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"C:\\Users\\saintosev\\PycharmProjects\\BloomscapeAutomationProject\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\saintosev\\PycharmProjects\\BloomscapeAutomationProject\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 354, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\saintosev\\PycharmProjects\\BloomscapeAutomationProject\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1723806057691, "stop": 1723806094390}], "attachments": [{"name": "log", "source": "84fced56-33f9-4286-95c0-2cd2812f5aaa-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "9f58327e-259d-4582-9443-dacd32556c56-attachment.txt", "type": "text/plain"}], "start": 1723805908834, "stop": 1723806094392, "uuid": "332f1a5a-d904-4348-8dd6-7dd81367547e", "historyId": "22557127bd8e5c9d27d61f44787213b8", "testCaseId": "22557127bd8e5c9d27d61f44787213b8", "fullName": "tests.test_buy_product#test_buy_product", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_buy_product"}, {"name": "host", "value": "DESKTOP-HJ761PI"}, {"name": "thread", "value": "6352-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_buy_product"}]}